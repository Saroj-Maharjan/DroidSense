name: Build and Release Applications

on:
  push:
    tags:
      - 'v*' # Trigger on version tags (e.g., v1.0.0)

jobs:
  build:
    name: Build Applications
    strategy:
      matrix:
        os: [linux, windows-latest, macos-latest]
        arch: [x64, arm64, x86]
    runs-on: ${{ matrix.os }}

    steps:
      # Step 1: Check out code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK for Java projects
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # Use a JDK distribution
          java-version: '17'      # Adjust the version as needed

      # Step 3: Build the application
      - name: Build for ${{ matrix.os }} ${{ matrix.arch }}
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./gradlew clean createDistributable -Ptarget=win-${{ matrix.arch }}
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            ./gradlew clean createDistributable -Ptarget=osx-${{ matrix.arch }}
          else
            ./gradlew clean createDistributable -Ptarget=linux-${{ matrix.arch }}

      # Step 4: Rename outputs with custom name format
      - name: Rename build output
        run: |
          CURRENT_TAG=$(echo "${GITHUB_REF##*/}")
          mv build/distributions/* "DroidSense_${CURRENT_TAG}_${{ matrix.os }}_${{ matrix.arch }}"

      # Step 5: Archive outputs
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "DroidSense_${{ github.ref_name }}_${{ matrix.os }}_${{ matrix.arch }}"
          path: "DroidSense_${{ github.ref_name }}_${{ matrix.os }}_${{ matrix.arch }}"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 1: Check out code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Download artifacts from build
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          path: releases

      # Step 3: Create a GitHub release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # Step 4: Upload files to the release
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: releases/*
          asset_name: "${{ github.ref_name }}-${{ matrix.os }}-${{ matrix.arch }}"
          asset_content_type: application/octet-stream
